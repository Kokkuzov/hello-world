python manage.py shell

from django.contrib.auth.models import User
from newsapp.models import Author, Category, Post, Comment

1. Создать двух пользователей (с помощью метода User.objects.create_user('username')).
	user1 = User.objects.create_user('user1', password='password1')
	user2 = User.objects.create_user('user2', password='password2')

2. Создать два объекта модели Author, связанные с пользователями.
	author1 = Author.objects.create(user=user1, rating=0)
	author2 = Author.objects.create(user=user2, rating=0)

3. Добавить 4 категории в модель Category.
	category1 = Category.objects.create(name='Спорт')
	category2 = Category.objects.create(name='Политика')
	category3 = Category.objects.create(name='Образование')
	category4 = Category.objects.create(name='Технологии')

4. Добавить 2 статьи и 1 новость.
	post1 = Post.objects.create(author=author1, post_type='статья', title='Спортивные новости', text='Текст статьи...', rating=0)
	post2 = Post.objects.create(author=author2, post_type='статья', title='Политика сегодня', text='Текст статьи...', rating=0)
	post3 = Post.objects.create(author=author1, post_type='новость', title='Технологии будущего', text='Текст новости...', rating=0)

5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
	post1.categories.add(category1, category4)
	post2.categories.add(category2)
	post3.categories.add(category4)

6. Создать как минимум 4 комментария к разным объектам модели Post 
(в каждом объекте должен быть как минимум один комментарий).
	comment1 = Comment.objects.create(post=post1, user=user2, text='Отличная статья!', rating=0)
	comment2 = Comment.objects.create(post=post1, user=user1, text='Согласен с мнением!', rating=0)
	comment3 = Comment.objects.create(post=post2, user=user2, text='Интересная точка зрения', rating=0)
	comment4 = Comment.objects.create(post=post3, user=user1, text='Это вдохновляет!', rating=0)

7. Применяя функции like() и dislike() к статьям/новостям и комментариям, 
скорректировать рейтинги этих объектов.
	comment1.like()  
	comment2.dislike() 
	comment3.like()  
	comment4.like()  

	post1.like()  # Увеличиваем рейтинг статьи
	post2.dislike()  # Уменьшаем рейтинг статьи
	post3.like()  # Увеличиваем рейтинг новости

8. Обновить рейтинги пользователей.
	author1.update_rating()
	author2.update_rating()

9. Вывести username и рейтинг лучшего пользователя 
(применяя сортировку и возвращая поля первого объекта).
	Author.objects.order_by('-rating').values('user__username', 'rating').first()

10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, 
основываясь на лайках/дислайках к этой статье.

	Post.objects.order_by('-rating').values('created_at', 'author__user__username', 'rating', 'title', 'post_type').first() 

11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.
	comments = Comment.objects.filter(post=best_post)
	for comment in comments:
    		print(f"Дата: {comment.created_at}, Пользователь: {comment.user.username}, Рейтинг: {comment.rating}, Текст: {comment.text}")